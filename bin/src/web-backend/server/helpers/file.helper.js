import AWS_SDK from "aws-sdk";
import fs from "fs";
import { AWS, Bucket } from "../config/constants/app.constants";

import { S3_UPLOAD_TYPES } from "../config/constants";

/**
* @class
* All method here are related file uploading and file deleting in s3 bucket. <br>
* Last Updated Date: August 11, 2022
* @extends DatabaseModel
*/
class FileHelper {
    /**
    * Default constructor.
    * @memberOf FileHelper
    */

    constructor(){
    }

    /**
    * DOCU:  This helper will trigger the saving of file_data to s3 bucket of Learn Platform. #workspace <br>
    * Triggered: This is being called from uploadFile function. <br>
    * Last Updated Date: August 18, 2022
    * @async
    * @param {object} file_data={} - Requires file_data
    * @param {text} upload_type="" - requires the upload type for headshot and resume
    * @param {int} candidate_id=1 - Requires the candidate id to upload in proper folder.
    * @returns {object} response_data { status: true, file_url: file_url_location, error: null }
    * @memberOf FileHelper
    * @author Adrian
    */
    uploadToS3 = async (file_data, upload_type, candidate_id) => {
        let response_data = { status: false, err: null, file_url: null };

        try{
            const fileContent = fs.readFileSync(file_data.path);

            if(fileContent){
                /* Replace the file name */
                file_data.originalname = file_data.originalname.replace(/[^A-Z0-9.]/ig, "");

                /* Set the parameters for the file upload */

                let params = {
                    Bucket: Bucket,
                    Key:  `${process.env.NODE_ENV}/${S3_UPLOAD_TYPES[upload_type]}/${candidate_id}/${Date.now()}${file_data.originalname}`,
                    Body: fileContent,
                    ACL:  'public-read'
                };

                /* Initialize s3 */
                const s3bucket = new AWS_SDK.S3(AWS.s3);

                let uploadS3_promise = new Promise((resolve, reject) => {
                    s3bucket.upload(params, function(err, data){
                        if(err){
                            response_data.status = false;
                            response_data.err = err;
                            reject(err);
                        }
                        else{
                            response_data.status = true;
                            response_data.file_url = data.Location;
                            resolve(data);
                        }
                    })
            });

            /* Await the response for it to be returned */
            let uploadS3_response = await uploadS3_promise;
            }
            else{
                throw new Error(`Could not read file ${file_data}`);
            }
        }
        catch(error){
            response_data.error = error;
        }
        finally{
            /* Delete the file generated by multer */
            fs.unlinkSync(`./${file_data.destination}${file_data.filename}`);
        }

        return response_data
    }

    /**
    * DOCU: This function will trigger the deletion of uploaded file on s3 bucket of Learn Platform. #workspace <br>
    * Triggered: This is being called from deleteUserFileRecord function of User Files model. <br>
    * Last Updated Date: August 10, 2021
    * @async
    * @function
    * @param {string} file_data='https://talent-book.s3.amazonaws.com/development/headshot/1/1660121391499Screenshot2375.png' - Requires file_data
    * @returns {object} response_data { status: true, error: null }
    * @memberOf FileHelper
    * @author Adrian
    */
    deleteFileFromS3 = async (file_url) => {
        let response_data = { status: false, err: null };

        /* Set the parameters for the file upload */
        let params = {
            Bucket: Bucket,
            Key: file_url.split((".amazonaws.com/"))[1]
        };

        /* Initialize s3 */
        const s3bucket = new AWS_SDK.S3(AWS.s3);

        return new Promise((resolve, reject) => {
            s3bucket.deleteObject(params, function(err, data){
                if(err){
                    response_data.status = false;
                    response_data.err = err;
                    reject(response_data);
                }
                else{
                    response_data.status = true;
                    resolve(response_data);
                }
            });
        });
    }

}

export default FileHelper;